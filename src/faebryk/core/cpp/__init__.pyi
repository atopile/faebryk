# This file is part of the faebryk project
# SPDX-License-Identifier: MIT

# This file is auto-generated by nanobind.
# Do not edit this file directly; edit the corresponding
# C++ file instead.
from typing import overload

class Graph:
    def __init__(self) -> None: ...
    def get_edges(self, arg: GraphInterface, /) -> set[GraphInterface]: ...
    def invalidate(self) -> None: ...
    @property
    def node_count(self) -> int: ...
    @property
    def edge_count(self) -> int: ...
    def __repr__(self) -> str: ...

class GraphInterface:
    def __init__(self) -> None: ...
    def __repr__(self) -> str: ...
    def get_graph(self) -> Graph: ...
    def get_edges(self) -> set[GraphInterface]: ...
    @overload
    def connect(self, arg: GraphInterface, /) -> None: ...
    @overload
    def connect(self, arg0: GraphInterface, arg1: Link, /) -> None: ...
    @overload
    def connect(self, arg0: GraphInterface, arg1: type, /) -> None: ...

class GraphInterfaceHierarchical(GraphInterface):
    def __init__(self, is_parent: bool) -> None: ...

class GraphInterfaceReference(GraphInterface):
    def __init__(self) -> None: ...

class GraphInterfaceSelf(GraphInterface):
    def __init__(self) -> None: ...

class Link:
    pass

class LinkDirect:
    pass

class LinkNamedParent:
    pass

class LinkParent:
    pass

class LinkPointer:
    pass

class LinkSibling:
    pass

def add(i: int, j: int = 1) -> int:
    """A function that adds two numbers"""
